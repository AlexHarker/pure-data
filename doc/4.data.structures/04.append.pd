#N struct template4 float x float y float z float q;
#N canvas 308 71 608 471 12;
#X obj 244 351 pointer;
#X msg 169 212 bang;
#X text 210 211 click here to re-initialize;
#X text 47 21 The objects below put three items in the data window.
First the window is cleared. Then a "pointer" object is instructed
to point to the beginning of the data window ("traverse pd-data") \,
and to output its value ("bang") to the "append" object. This object
is then given numeric values to create three items., f 73;
#X obj 79 382 append template4 x y z q;
#X msg 320 276 \; pd-data4 clear;
#N canvas 1012 89 315 341 data4 1;
#X scalar template4 50 250 30 9 \;;
#X scalar template4 200 20 80 90 \;;
#X scalar template4 100 200 -50 30 \;;
#X restore 461 301 pd data4;
#N canvas 396 463 458 185 template4 0;
#X obj 44 63 filledpolygon 244 q 5 0 0 20 z 40 0;
#X text 40 98 The template for the two scalars \, as in the last patch
;
#X obj 44 38 struct template4 float x float y float z float q;
#X restore 459 325 pd template4;
#X msg 244 321 traverse pd-data4 \, bang;
#X text 47 149 The outlet of "append" is a pointer to the newly created
scalar. You can pass that on to other append objects if you want to
build heterogeneous lists., f 73;
#X text 47 99 The "append" object is given the argument "template4"
to specify what kind of data structure to append. The other arguments
are the names of variables we'll set., f 73;
#X obj 169 246 trigger bang bang bang;
#X msg 79 297 50 250 30 9 \, 200 20 80 90 \, 100 200 -50 30, f 14
;
#X text 405 425 Updated for Pd 0.32;
#X connect 0 0 4 4;
#X connect 1 0 11 0;
#X connect 8 0 0 0;
#X connect 11 0 12 0;
#X connect 11 1 8 0;
#X connect 11 2 5 0;
#X connect 12 0 4 0;
