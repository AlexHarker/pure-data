#N canvas 566 34 591 677 12;
#N canvas 595 399 475 139 help-append-template1 0;
#X obj 101 72 filledpolygon z z 0 0 0 20 0 20 30 0 30;
#X obj 67 24 struct help-append-template1 float x float y float z;
#X restore 352 537 pd help-append-template1;
#N canvas 1152 156 300 206 help-append-data 1;
#X restore 352 515 pd help-append-data;
#X obj 286 271 pointer;
#X msg 286 247 traverse pd-help-append-data \, bang;
#X obj 51 311 append help-append-template1 x y z;
#X floatatom 51 253 5 0 0 0 - - - 0;
#X msg 351 322 \; pd-help-append-data clear;
#X text 66 68 "append" maintains a pointer to a scalar \, or else an
empty pointer to the head of a list. You may set the pointer using
the leftmost inlet. The creation arguments specify the template of
a new scalar to append \, and the names of the fields (there should
be at least one) you will wish to initialize. To append an object \,
send a number to the leftmost inlet. "Append"'s pointer is updated
to point to the new scalar \, and the new pointer is also output.,
f 66;
#X text 285 226 go to (and output) "head" of the list;
#X obj 176 499 pointer;
#X msg 176 475 traverse pd-help-append-data \, bang;
#X floatatom 98 445 5 0 0 0 - - - 0;
#X msg 175 450 set help-append-template1 x;
#X text 67 178 To insert to the beginning of a list \, you can append
to the "head" of the list., f 66;
#X obj 98 502 append;
#X text 170 429 click on these messages first:;
#X text 146 247 click this first =>;
#X text 426 299 click to clear:;
#X obj 351 298 loadbang;
#X obj 51 280 trigger f f;
#X text 76 379 If there is no more than one field \, you can use a
"set" message to set the template and field:;
#X text 46 600 see also:;
#X obj 68 627 get;
#X obj 100 627 set;
#X obj 197 601 getsize;
#X obj 264 601 setsize;
#X obj 264 627 element;
#X obj 133 627 scalar;
#X obj 52 22 append;
#X obj 133 601 pointer;
#X obj 197 627 struct;
#X text 346 617 updated for Pd version 0.47;
#X text 483 21 <= click;
#N canvas 890 125 597 348 reference 0;
#X obj 8 52 cnv 5 550 5 empty empty INLETS: 8 18 0 13 #202020 #000000
0;
#X obj 7 85 cnv 1 550 1 empty empty 1st: 8 12 0 13 #000000 #000000
0;
#X obj 8 230 cnv 2 550 2 empty empty OUTLET: 8 12 0 13 #202020 #000000
0;
#X obj 8 267 cnv 2 550 2 empty empty ARGUMENT: 8 12 0 13 #202020 #000000
0;
#X obj 7 324 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000
0;
#X obj 7 136 cnv 1 550 1 empty empty 'n': 8 12 0 13 #7c7c7c #000000
0;
#X obj 34 18 append;
#X text 89 17 - add an item to a Data Structure list.;
#X text 56 92 set <symbol \, symbol> -;
#X text 217 92 if none or just one field is given \, you can use 'set'
to set struct name and field., f 47;
#X text 54 139 number of arguments set 'n' fields andd we create 'n'
inlets for them., f 70;
#X obj 7 190 cnv 1 550 1 empty empty rightmost: 8 12 0 13 #7c7c7c #000000
0;
#X text 113 200 pointer - a pointer to the added Data Structure.;
#X text 111 276 symbol - structure name., f 49;
#X text 125 296 list - symbols for field names (each creates an inlet).
;
#X text 116 165 float - set field value and append new Data Structure.
;
#X text 113 238 pointer - a pointer to the head of the list when appending.
;
#X restore 389 21 pd reference;
#X obj 15 55 cnv 1 550 1 empty empty empty 8 12 0 13 #000000 #000000
0;
#X obj 18 581 cnv 1 550 1 empty empty empty 8 12 0 13 #000000 #000000
0;
#X text 106 21 - add an item to a Data Structure list;
#X connect 2 0 4 3;
#X connect 3 0 2 0;
#X connect 5 0 19 0;
#X connect 9 0 14 1;
#X connect 10 0 9 0;
#X connect 11 0 14 0;
#X connect 12 0 14 0;
#X connect 18 0 6 0;
#X connect 19 0 4 0;
#X connect 19 1 4 1;
#X connect 19 1 4 2;
