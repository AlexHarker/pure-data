#N struct array-help-struct float x float y array z float;
#N struct float float y;
#N struct array-help-struct2 float x float y array z element-struct2
;
#N struct element-struct2 float x float y float w;
#N canvas 533 23 588 574 12;
#X text 420 156 (click for details:), f 11;
#N canvas 561 26 758 720 define 0;
#X text 340 522 creation arguments:;
#X text 370 593 optional name;
#X text 231 149 read from a file;
#X text 251 174 write to a file;
#X text 55 68 "array define" maintains an array and can name it so
that other objects can find it (and later should have some alternative
\, anonymous way to be found)., f 80;
#X text 369 610 optional size (100 by default);
#X msg 33 118 const 0;
#X text 91 118 set to a constant (0 \, for instance);
#X msg 41 149 read array-object-help.txt;
#X msg 53 174 write array-object-help.txt;
#X obj 46 514 array define array-help-1;
#X msg 60 205 resize 100;
#X text 79 235 ... other messages are also forwarded to the array like
those above - xticks \, etc \, and also lists to set values.;
#X obj 145 395 r array-help-send;
#X floatatom 145 443 5 0 0 0 - - - 0;
#X obj 355 390 r array-help-send;
#X floatatom 355 464 5 0 0 0 - - - 0;
#X text 61 488 click to open or edit array:;
#X obj 145 419 getsize float-array z;
#X obj 355 439 array size -s float-array z;
#X text 140 344 The pointer will be to a structure float-array and
the array itself will be the field named 'z' \, so that you can access
it as shown in these examples:;
#X obj 57 546 array define -k array-help-2 10;
#A 0 -0.320006 -0.0133338 -0.340006 0 0.973333 0 -0.300005 0 0.966667
0;
#X msg 75 315 send array-help-send;
#X text 368 540 optional -k flag to keep contents;
#X obj 58 577 array define -yrange -4 4 array-help-3 10;
#X obj 58 608 array define -pix 800 400 array-help-4 16;
#X text 369 557 optional "-yrange low high" to set the yrange;
#X text 369 575 optional "-pix x y" to set the plot size;
#X obj 69 285 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000;
#X text 92 282 bang to output a pointer to the scalar containing the
array;
#X obj 46 645 getsize float-array z;
#X floatatom 46 669 5 0 0 0 - - - 0;
#X text 231 315 send pointer to a named receive object;
#X text 488 145 If created without any arguments \, the array object
defaults to 'array define', f 28;
#X obj 437 153 array;
#X obj 355 414 trigger bang pointer;
#X text 288 639 note: if "-k" is given but no size is specified \,
the size is restored to whatever it may have been changed to using
"resize" messages \, but if there is a size argument given the restored
array has the originally specified size.;
#X text 643 17 <= click;
#N canvas 778 172 588 403 reference 0;
#X obj 9 52 cnv 5 550 5 empty empty INLETS: 8 18 0 13 #202020 #000000
0;
#X obj 8 85 cnv 1 550 1 empty empty 1st: 8 12 0 13 #000000 #000000
0;
#X obj 9 200 cnv 2 550 2 empty empty OUTLET: 8 12 0 13 #202020 #000000
0;
#X obj 9 317 cnv 2 550 2 empty empty ARGUMENTS: 8 12 0 13 #202020 #000000
0;
#X obj 8 376 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000
0;
#X obj 35 18 array define;
#X text 132 17 - create an array.;
#X text 94 92 bang - output a pointer to the scalar containing the
array., f 64;
#X text 31 113 send <symbol> - send pointer to a named receive object
, f 73;
#X text 124 210 pointer - a pointer to the scalar containing the array.
;
#X obj 9 245 cnv 2 550 2 empty empty FLAGS: 8 12 0 13 #202020 #000000
0;
#X text 87 252 -k: saves/keeps the contents of the arrray with the
patch.;
#X text 87 270 -yrange <float \, float>: set minimum and maximum plot
range.;
#X text 87 289 -pix <float \, float>: set x and y graph size.;
#X text 123 326 symbol - array name (default: internal numbered 'table#').
;
#X text 130 348 float - size and also xrange (default: 100).;
#X text 25 137 other messages - [array define] send other messages
that arrays understand like: 'const' \, 'resize' \, etc. For reference
\, see 2.control.examples "15.array" and "16.more.arrays"., f 74;
#X restore 540 18 pd reference;
#X obj 14 51 cnv 1 725 1 empty empty empty 8 12 0 13 #000000 #000000
0;
#X obj 37 18 array define;
#X text 138 18 - create \, store \, and/or edit an array.;
#X connect 6 0 10 0;
#X connect 8 0 10 0;
#X connect 9 0 10 0;
#X connect 10 0 30 0;
#X connect 11 0 10 0;
#X connect 13 0 18 0;
#X connect 15 0 35 0;
#X connect 18 0 14 0;
#X connect 19 0 16 0;
#X connect 22 0 10 0;
#X connect 28 0 10 0;
#X connect 30 0 31 0;
#X connect 35 0 19 0;
#X connect 35 1 19 1;
#X restore 421 197 pd define;
#X obj 37 221 array size;
#X text 151 197 - create \, store \, and/or edit one;
#X text 151 221 - get or change size;
#X text 151 245 - sum all or a range of elements;
#N canvas 561 23 627 699 array-and-data-structures 0;
#X obj 220 212 pointer;
#N canvas 814 134 468 210 array-help-struct 0;
#X obj 36 88 filledpolygon 0 0 0 0 0 0 10 20 10 20 0 0 0;
#X obj 36 61 struct array-help-struct float x float y array z float
;
#X obj 40 119 plot z 500 2 25 5 5;
#X restore 430 123 pd array-help-struct;
#N canvas 916 175 353 251 array-help-data 0;
#X scalar array-help-struct 84 93 \; 0 \; 0 \; -1 \; -6 \; -9 \; -10
\; -5 \; -2 \; 5 \; -7 \; -41 \; -47 \; -45 \; -34 \; -17 \; 8 \; 5
\; 2 \; -2 \; -11 \; -16 \; -26 \; -43 \; 16 \; 24 \; 26 \; 21 \; 20
\; 19 \; 17 \; 16 \; 16 \; 16 \; 16 \; 12 \; \;;
#X text 65 167 We have one datum... right-click for properties to see
contents., f 32;
#X restore 430 99 pd array-help-data;
#X msg 220 168 traverse pd-array-help-data \, next, f 28;
#X obj 90 166 bng 17 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000;
#X obj 90 241 array sum -s array-help-struct z, f 19;
#X floatatom 90 282 5 0 0 0 - - - 0;
#X text 29 14 The array objects can also reference arrays within structures
via pointers. The "-s" flag takes two arguments \, specifying the data
structure and the field within it that will contain the array. By default
the array should be a simple floating point array (use the template
"float" for the array elements) but you can override that using "-f"
as shown further down., f 81;
#X obj 311 512 pointer;
#X obj 97 462 bng 17 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000;
#X floatatom 97 580 5 0 0 0 - - - 0;
#N canvas 848 269 447 373 array-help-struct2 0;
#X obj 237 232 pointer;
#X msg 37 200 20 20;
#X obj 40 92 filledpolygon 0 0 0 0 0 0 10 20 10 20 0 0 0;
#X obj 40 54 struct array-help-struct2 float x float y array z element-struct2
;
#X msg 237 175 traverse pd-array-help-struct2 \, bang, f 22;
#X obj 37 260 append array-help-struct2 x y;
#X obj 43 118 plot z 500 2 25 5;
#X connect 0 0 5 2;
#X connect 1 0 5 0;
#X connect 4 0 0 0;
#X restore 286 406 pd array-help-struct2;
#N canvas 818 190 399 321 array-help-data2 0;
#X scalar array-help-struct2 80 30 \; -54 200 10 \; 138 -10 3 \; -32
26 0 \; 109 141 8 \; 267 26 3 \; \;;
#X text 31 267 A structure whose array has (x \, y \, w) triples -
right-click to see contents., f 40;
#X restore 300 384 pd array-help-data2;
#X msg 311 471 traverse pd-array-help-data2 \, next, f 25;
#N canvas 830 245 407 149 element-struct2 0;
#X obj 39 58 struct element-struct2 float x float y float w;
#X restore 306 429 pd element-struct2;
#X obj 97 539 array sum -s array-help-struct2 z -f element-struct2
w, f 31;
#X text 146 580 sum of all the 'w' values in the array;
#X text 237 244 when "-s" is given this inlet takes a pointer in place
of a name., f 35;
#X text 441 406 <= main structure;
#X text 441 429 <= element structure;
#X obj 97 494 trigger bang bang;
#X text 441 384 <= click for the array;
#X text 16 321 Using an additional '-f' flag we can specify which field
in the array we're referring to. In this example the array has (x \,
y \, w) triples (in [struct element-struct2]) and we're asking for
the "w" field using the "-f" flag and its two arguments (struct name
and field name)., f 85;
#X obj 284 663 ../4.data.structures/01.scalars;
#X text 41 621 To know more about Data Structures \, how to handle
pointers and see examples \, please refer to the 4.Data.Structure section
of the Pd's tutorials. Starting with the first example below., f 77
;
#X obj 90 194 t b b;
#X text 267 100 click for the array =>;
#X text 309 124 the structure =>;
#X text 135 282 sum of all the 'z' values in the array;
#X connect 0 0 5 2;
#X connect 3 0 0 0;
#X connect 4 0 25 0;
#X connect 5 0 6 0;
#X connect 8 0 15 2;
#X connect 9 0 20 0;
#X connect 13 0 8 0;
#X connect 15 0 10 0;
#X connect 20 0 15 0;
#X connect 20 1 13 0;
#X connect 25 0 5 0;
#X connect 25 1 3 0;
#X restore 330 426 pd array-and-data-structures;
#N canvas 640 168 611 344 size 0;
#X floatatom 63 152 5 1 100 0 - - - 0;
#X obj 46 275 print;
#X text 262 88 "array size" outputs the size (if sent a bang) or sets
the size (if sent a number)., f 43;
#X obj 46 246 array size array-help-2;
#X obj 48 127 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000;
#X text 255 257 creations arguments: either array name or "-s" and
optional "-f" flags to refer to an array in a data structure, f 41
;
#X msg 215 215 symbol array-help-2;
#X text 362 194 inlet to set name or pointer;
#X text 108 151 number to set size;
#X text 72 126 bang outputs size;
#X msg 204 186 symbol array-help-1;
#X obj 15 61 cnv 1 575 1 empty empty empty 8 12 0 13 #000000 #000000
0;
#X text 480 23 <= click;
#N canvas 800 173 583 375 reference 0;
#X obj 9 52 cnv 5 550 5 empty empty INLETS: 8 18 0 13 #202020 #000000
0;
#X obj 8 85 cnv 1 550 1 empty empty 1st: 8 12 0 13 #000000 #000000
0;
#X obj 9 204 cnv 2 550 2 empty empty OUTLET: 8 12 0 13 #202020 #000000
0;
#X obj 9 311 cnv 2 550 2 empty empty ARGUMENT: 8 12 0 13 #202020 #000000
0;
#X obj 8 350 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000
0;
#X obj 38 17 array size;
#X text 125 16 - output or set array size;
#X text 124 92 bang - output the array size., f 45;
#X obj 7 144 cnv 1 550 1 empty empty 2nd: 8 12 0 13 #7c7c7c #000000
0;
#X text 118 117 float - set the array size., f 46;
#X text 112 153 symbol - set array name., f 46;
#X text 124 213 float - array size.;
#X obj 9 241 cnv 2 550 2 empty empty FLAGS: 8 12 0 13 #202020 #000000
0;
#X text 106 173 pointer - pointer to the array if -s flag is used.
;
#X text 60 261 -s <symbol \, symbol>: struct name and field name of
main structure., f 67;
#X text 60 279 -f <symbol \, symbol>: struct name and field name of
element structure., f 69;
#X text 107 320 symbol - array name if no flags are given (default:
none).;
#X restore 386 23 pd reference;
#X obj 37 27 array size;
#X text 124 27 - get or change size;
#X connect 0 0 3 0;
#X connect 3 0 1 0;
#X connect 4 0 3 0;
#X connect 6 0 3 1;
#X connect 10 0 3 1;
#X restore 421 221 pd size;
#X obj 37 197 array define;
#X text 36 426 accessing arrays inside data structures:;
#X text 34 59 In Pd an array may be part of a "garray" (a graphical
array of numbers) or appear as a slot in a data structure (in which
case the elements may be arbitrary data \, not necessarily just numbers).
The "array" object can define an array (so far just of numbers but
maybe later arbitrary data structures) or access an array defined elsewhere
to get or change its size \, set or read its elements \, and so on.
, f 72;
#X text 40 168 The first argument sets its function:;
#X obj 37 245 array sum;
#X obj 37 317 array quantile;
#N canvas 560 199 665 420 sum 0;
#X floatatom 75 166 5 0 10 0 - - - 0;
#X obj 66 141 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000;
#X floatatom 66 299 5 0 0 0 - - - 0;
#X floatatom 106 193 5 -1 10 0 - - - 0;
#X text 82 84 "array sum" outputs the sum of all or a selected range
of elements of the array.;
#X obj 66 254 array sum array-help-2, f 12;
#X text 184 293 - optional number to initialize onset - default 0;
#X text 184 312 - optional number to initialize number of points -
default -1, f 61;
#X text 92 139 bang to output sum;
#X text 185 257 creation arguments: either array name or "-s" and optional
"-f" flags to refer to an array in a data structure;
#X text 125 162 onset (first index to sum from) \, zero for start of
array;
#X text 154 188 number of points or -1 for end of array;
#X text 66 359 (array-help-2 is defined in the "define" subwindow).
;
#X msg 147 220 symbol array-help-2;
#X text 291 219 set name or pointer;
#X text 545 26 <= click;
#N canvas 800 173 581 481 reference 0;
#X obj 9 52 cnv 5 550 5 empty empty INLETS: 8 18 0 13 #202020 #000000
0;
#X obj 8 85 cnv 1 550 1 empty empty 1st: 8 12 0 13 #000000 #000000
0;
#X obj 9 266 cnv 2 550 2 empty empty OUTLET: 8 12 0 13 #202020 #000000
0;
#X obj 9 373 cnv 2 550 2 empty empty ARGUMENTS: 8 12 0 13 #202020 #000000
0;
#X obj 8 452 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000
0;
#X obj 7 206 cnv 1 550 1 empty empty 3rd: 8 12 0 13 #7c7c7c #000000
0;
#X text 112 215 symbol - set array name., f 46;
#X text 124 275 float - array size.;
#X obj 9 303 cnv 2 550 2 empty empty FLAGS: 8 12 0 13 #202020 #000000
0;
#X text 106 235 pointer - pointer to the array if -s flag is used.
;
#X text 60 323 -s <symbol \, symbol>: struct name and field name of
main structure., f 67;
#X text 60 341 -f <symbol \, symbol>: struct name and field name of
element structure., f 69;
#X obj 38 17 array sum;
#X text 125 16 - output the sum of the arrray or a range selecion.
;
#X text 124 92 bang - output sum., f 49;
#X text 118 117 float - onset (index to sum from \, 0 is the start).
;
#X obj 7 152 cnv 1 550 1 empty empty 2nd: 8 12 0 13 #7c7c7c #000000
0;
#X text 65 168 float - number or points to sum from onset (-1 is the
end of array)., f 68;
#X text 114 401 float - initial onset (default: 0).;
#X text 107 381 symbol - array name if no flags are given (default:
none).;
#X text 114 421 float - initial number of points (default: -1 \, end
of array)., f 61;
#X restore 451 26 pd reference;
#X obj 17 61 cnv 1 625 1 empty empty empty 8 12 0 13 #000000 #000000
0;
#X text 111 26 - sum all or a range of elements;
#X obj 37 25 array sum;
#X connect 0 0 5 0;
#X connect 1 0 5 0;
#X connect 3 0 5 1;
#X connect 5 0 2 0;
#X connect 13 0 5 2;
#X restore 421 245 pd sum;
#X obj 37 269 array get;
#N canvas 614 233 677 453 get 0;
#X floatatom 75 166 5 0 10 0 - - - 0;
#X obj 60 141 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000;
#X floatatom 101 198 5 -1 10 0 - - - 0;
#X obj 61 277 array get array-help-2, f 12;
#X text 69 86 "array get" outputs all or a selected range of elements
of the array as a list., f 55;
#X text 162 294 - optional number to initialize onset - default 0,
f 61;
#X text 162 311 - optional number to initialize number of points -
default -1, f 61;
#X text 162 263 creation arguments: either array name or "-s" and optional
"-f" flags to refer to an array in a data structure, f 61;
#X text 143 198 number of points or -1 for end of array;
#X text 82 141 bang for output;
#X text 237 383 (array-help-2 is defined in the "define" subwindow).
;
#X msg 142 227 symbol array-help-2;
#X text 287 226 set name or pointer;
#X text 121 165 onset (first index to output) \, zero for start of
array;
#X listbox 61 348 70 0 0 0 - - - 0;
#X obj 61 385 print array-get;
#X text 542 29 <= click;
#N canvas 800 173 589 486 reference 0;
#X obj 9 55 cnv 5 550 5 empty empty INLETS: 8 18 0 13 #202020 #000000
0;
#X obj 8 88 cnv 1 550 1 empty empty 1st: 8 12 0 13 #000000 #000000
0;
#X obj 9 266 cnv 2 550 2 empty empty OUTLET: 8 12 0 13 #202020 #000000
0;
#X obj 9 373 cnv 2 550 2 empty empty ARGUMENTS: 8 12 0 13 #202020 #000000
0;
#X obj 8 452 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000
0;
#X obj 7 206 cnv 1 550 1 empty empty 3rd: 8 12 0 13 #7c7c7c #000000
0;
#X text 112 215 symbol - set array name., f 46;
#X obj 9 303 cnv 2 550 2 empty empty FLAGS: 8 12 0 13 #202020 #000000
0;
#X text 106 235 pointer - pointer to the array if -s flag is used.
;
#X text 60 323 -s <symbol \, symbol>: struct name and field name of
main structure., f 67;
#X text 60 341 -f <symbol \, symbol>: struct name and field name of
element structure., f 69;
#X obj 7 155 cnv 1 550 1 empty empty 2nd: 8 12 0 13 #7c7c7c #000000
0;
#X text 116 401 float - initial onset (default: 0).;
#X text 109 381 symbol - array name if no flags are given (default:
none).;
#X obj 38 20 array get;
#X text 116 19 - output all items of the arrray or a range selecion.
;
#X text 124 95 bang - output the elements of the array., f 49;
#X text 118 120 float - onset (index to output from \, 0 is the start).
;
#X text 50 174 float - number or points to output from onset (-1 is
the end of array)., f 71;
#X text 124 275 list - array elements.;
#X text 116 421 float - initial number of points (default: -1 \, end
of array)., f 61;
#X restore 448 29 pd reference;
#X obj 21 67 cnv 1 625 1 empty empty empty 8 12 0 13 #000000 #000000
0;
#X obj 44 30 array get;
#X text 148 31 - get contents as a list;
#X connect 0 0 3 0;
#X connect 1 0 3 0;
#X connect 2 0 3 1;
#X connect 3 0 14 0;
#X connect 11 0 3 2;
#X connect 14 0 15 0;
#X restore 421 269 pd get;
#X obj 37 293 array set;
#N canvas 716 259 608 399 set 0;
#X obj 56 255 array set array-help-2, f 12;
#X msg 56 159 0.1 0.2 0.3 0.4 0.3 0.2 0.1;
#X text 31 73 "array set" sets values of an array from an incoming
list \, starting from a specified onset (0 by default). The size of
the array is not changed -- values that would be written past the end
of the array are dropped., f 67;
#X floatatom 96 195 5 0 0 0 - - - 0;
#X text 136 193 onset (first index to write to);
#X text 166 297 - optional number to initialize onset - default 0;
#X text 170 260 creation arguments: either array name or "-s" and optional
"-f" flags to refer to an array in a data structure;
#X text 255 160 list of values to write to array;
#X text 50 352 (array-help-2 is defined in the "define" subwindow).
;
#X msg 137 222 symbol array-help-2;
#X text 283 221 set name or pointer;
#X text 502 20 <= click;
#N canvas 800 173 585 432 reference 0;
#X obj 9 55 cnv 5 550 5 empty empty INLETS: 8 18 0 13 #202020 #000000
0;
#X obj 8 88 cnv 1 550 1 empty empty 1st: 8 12 0 13 #000000 #000000
0;
#X obj 9 237 cnv 2 550 2 empty empty OUTLET: 8 12 0 13 #202020 #000000
0;
#X obj 9 344 cnv 2 550 2 empty empty ARGUMENTS: 8 12 0 13 #202020 #000000
0;
#X obj 8 403 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000
0;
#X obj 7 177 cnv 1 550 1 empty empty 3rd: 8 12 0 13 #7c7c7c #000000
0;
#X text 112 186 symbol - set array name., f 46;
#X obj 9 274 cnv 2 550 2 empty empty FLAGS: 8 12 0 13 #202020 #000000
0;
#X text 106 206 pointer - pointer to the array if -s flag is used.
;
#X text 60 294 -s <symbol \, symbol>: struct name and field name of
main structure., f 67;
#X text 60 312 -f <symbol \, symbol>: struct name and field name of
element structure., f 69;
#X obj 7 135 cnv 1 550 1 empty empty 2nd: 8 12 0 13 #7c7c7c #000000
0;
#X text 116 372 float - initial onset (default: 0).;
#X text 109 352 symbol - array name if no flags are given (default:
none).;
#X text 124 246 list - array elements.;
#X obj 38 20 array set;
#X text 116 19 - set all items of the arrray or a range selecion.;
#X text 118 100 list - list of values to write to array;
#X text 117 145 float - onset (index to set from \, 0 is the start).
, f 51;
#X restore 408 20 pd reference;
#X obj 17 58 cnv 1 575 1 empty empty empty 8 12 0 13 #000000 #000000
0;
#X obj 35 24 array set;
#X text 113 25 - set contents from a list;
#X connect 1 0 0 0;
#X connect 3 0 0 1;
#X connect 9 0 0 2;
#X restore 421 293 pd set;
#X text 150 269 - get contents as a list;
#X text 150 293 - set contents from a list;
#X text 150 317 - get a quantile;
#X obj 37 341 array random;
#N canvas 391 47 721 692 quantile+random 0;
#X floatatom 74 247 5 0 100 0 - - - 0;
#X obj 43 324 array quantile array-help-5, f 14;
#N canvas 0 50 450 250 (subpatch) 0;
#X array array-help-5 100 float 1;
#A 0 0 0 0 0 0 0 0 0 0 0 0 0.00715053 0.00715053 0.0285789 0.0500072
0.0714356 0.100007 0.128578 0.164292 0.207148 0.478574 0.628573 0.678572
0.721429 0.717857 0.714286 0.707143 0.7 0.692857 0.685715 0.678572
0.18572 0.164292 0.157149 0.0142931 -0.00713521 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.014293 0.0214357 0.0357213 0.078578
0.142863 0.207148 0.335718 0.407146 0.435717 0.478574 0.514288 0.557144
0.592858 0.642858 0.7 0.692857 0.692857 0.692857 0.692857 0.7 0.696429
0.349997 0.335712 0.321426 0.278569 0.192856 0.149999 0.135714 0.114285
0.0999998 0.0714298 0.0642871 0.0571443 0.0285732 0 0 0 0 0;
#X coords 0 1 99 0 200 140 1 0 0;
#X restore 41 465 graph;
#X floatatom 106 271 5 -1 100 0 - - - 0;
#X floatatom 43 196 5 -1 100 0 - - - 0;
#X obj 43 221 / 100;
#X floatatom 43 368 5 0 100 0 - - - 0;
#X floatatom 307 652 5 0 100 0 - - - 0;
#X obj 307 608 array random array-help-5, f 13;
#X obj 307 470 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc
#000000 #000000;
#X floatatom 330 529 5 0 0 0 - - - 0;
#X floatatom 351 555 5 0 0 0 - - - 0;
#X text 280 413 "array random" makes a pseudo-random number from 0
to 1 and outputs its quantile (which will therefore have probabilities
proportional to the table's values.);
#X text 331 467 bang to generate a random value;
#X msg 314 501 seed 56;
#X text 382 501 set random seed;
#X text 159 363 - optional number to initialize onset - default 0,
f 61;
#X text 158 382 - optional number to initialize number of points -
default -1, f 61;
#X text 425 622 same creation arguments;
#X text 166 330 creation arguments: either array name or "-s" and optional
"-f" flags to refer to an array in a data structure, f 60;
#X text 118 246 onset (first index to sum from) \, zero for start of
array;
#X text 148 272 number of points or -1 for end of array;
#X text 375 526 onset;
#X text 393 554 number of points;
#X text 88 195 quantile (between 0 and 1);
#X msg 138 299 symbol array-help-2;
#X text 283 298 set name or pointer;
#X msg 395 582 symbol array-help-2;
#X text 537 581 set name or pointer;
#X text 47 84 "array quantile" outputs the specified quantile by interpreting
the array as a histogram. The output will always be in the range 0
to array size - 1 The 0.5 quantile is also known as the median. This
generalizes the "array random" function allowing you to use the same
source of randomness on several arrays \, for example. Negative numbers
in the array are silently replaced by zero. Quantiles outside the range
0-1 output the x values at the two extremes of the array (0 and 99
here)., f 90;
#X text 602 20 <= click;
#N canvas 707 23 578 716 reference 0;
#X obj 10 34 cnv 5 550 5 empty empty INLETS: 8 18 0 13 #202020 #000000
0;
#X obj 10 184 cnv 2 550 2 empty empty OUTLET: 8 12 0 13 #202020 #000000
0;
#X obj 10 261 cnv 2 550 2 empty empty ARGUMENTS: 8 12 0 13 #202020
#000000 0;
#X obj 9 325 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000
0;
#X obj 8 141 cnv 1 550 1 empty empty 4th: 8 12 0 13 #7c7c7c #000000
0;
#X text 126 144 symbol - set array name., f 49;
#X obj 10 213 cnv 2 550 2 empty empty FLAGS: 8 12 0 13 #202020 #000000
0;
#X text 119 162 pointer - pointer to the array if -s flag is used.
;
#X text 69 220 -s <symbol \, symbol>: struct name and field name of
main structure., f 69;
#X text 69 238 -f <symbol \, symbol>: struct name and field name of
element structure., f 69;
#X obj 8 114 cnv 1 550 1 empty empty 3rd: 8 12 0 13 #7c7c7c #000000
0;
#X text 113 285 float - initial onset (default: 0)., f 61;
#X text 106 267 symbol - array name if no flags are given (default:
none)., f 62;
#X text 113 303 float - initial number of points (default: -1 \, end
of array)., f 61;
#X obj 26 8 array quantile;
#X text 144 7 - outputs the specified quantile.;
#X text 133 65 float - quantile (betwee 0 and 1).;
#X obj 9 88 cnv 1 550 1 empty empty 2nd: 8 12 0 13 #7c7c7c #000000
0;
#X text 133 91 float - array onset (o is the end of array).;
#X text 133 119 float - number or points (-1 is the end of array).
, f 51;
#X text 133 190 float - random index value from the array.;
#X obj 9 62 cnv 1 550 1 empty empty 1st: 8 12 0 13 #7c7c7c #000000
0;
#X obj 10 385 cnv 5 550 5 empty empty INLETS: 8 18 0 13 #202020 #000000
0;
#X obj 10 551 cnv 2 550 2 empty empty OUTLET: 8 12 0 13 #202020 #000000
0;
#X obj 10 628 cnv 2 550 2 empty empty ARGUMENTS: 8 12 0 13 #202020
#000000 0;
#X obj 9 692 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000
0;
#X text 126 508 symbol - set array name., f 49;
#X obj 10 580 cnv 2 550 2 empty empty FLAGS: 8 12 0 13 #202020 #000000
0;
#X text 119 526 pointer - pointer to the array if -s flag is used.
;
#X text 69 587 -s <symbol \, symbol>: struct name and field name of
main structure., f 69;
#X text 69 605 -f <symbol \, symbol>: struct name and field name of
element structure., f 69;
#X obj 8 505 cnv 1 550 1 empty empty 3rd: 8 12 0 13 #7c7c7c #000000
0;
#X text 113 652 float - initial onset (default: 0)., f 61;
#X text 106 634 symbol - array name if no flags are given (default:
none)., f 62;
#X text 113 670 float - initial number of points (default: -1 \, end
of array)., f 61;
#X text 123 358 - outputs the specified quantile.;
#X obj 9 479 cnv 1 550 1 empty empty 2nd: 8 12 0 13 #7c7c7c #000000
0;
#X text 133 557 float - random index value from the array.;
#X obj 9 413 cnv 1 550 1 empty empty 1st: 8 12 0 13 #7c7c7c #000000
0;
#X obj 26 359 array random;
#X text 133 456 float - sets onset.;
#X text 84 438 seed <float> - sets random seed.;
#X text 140 420 bang - bang to generate a random value.;
#X text 133 482 float - set number of points (-1 is the end of the
array).;
#X restore 508 20 pd reference;
#X obj 22 68 cnv 1 675 1 empty empty empty 8 12 0 13 #000000 #000000
0;
#X obj 46 17 array quantile;
#X text 158 17 - get a quantile;
#X obj 46 42 array random;
#X text 158 42 - array as probabilities;
#X text 349 653 index;
#X connect 0 0 1 1;
#X connect 1 0 6 0;
#X connect 3 0 1 2;
#X connect 4 0 5 0;
#X connect 5 0 1 0;
#X connect 8 0 7 0;
#X connect 9 0 8 0;
#X connect 10 0 8 0;
#X connect 11 0 8 1;
#X connect 14 0 8 0;
#X connect 25 0 1 3;
#X connect 27 0 8 2;
#X restore 421 330 pd quantile+random;
#X obj 37 364 array max;
#N canvas 579 106 661 597 min+max 0;
#N canvas 0 50 450 250 (subpatch) 0;
#X array array-help-6 100 float 1;
#A 0 0.335714 0.37857 0.421427 0.442855 0.478569 0.521426 0.535711
0.55714 0.585711 0.599997 0.614282 0.63571 0.649996 0.664282 0.671424
0.699995 0.699995 0.714281 0.721424 0.707138 0.699995 0.692853 0.68571
0.671424 0.649996 0.628568 0.599997 0.571425 0.514283 0.471426 0.414284
0.385713 0.357142 0.328571 0.3 0.285714 0.271429 0.25 0.228572 0.214286
0.207143 0.200001 0.185715 0.17143 0.164287 0.157144 0.150001 0.135716
0.128573 0.12143 0.12143 0.114287 0.114287 0.114287 0.114287 0.114287
0.12143 0.125001 0.128573 0.128573 0.135716 0.139287 0.142858 0.150001
0.157144 0.157144 0.164287 0.17143 0.200001 0.214286 0.228572 0.235715
0.242857 0.257143 0.271429 0.285714 0.307142 0.321428 0.335714 0.357142
0.371427 0.385713 0.399999 0.407141 0.414284 0.421427 0.42857 0.435713
0.442855 0.457141 0.460712 0.464284 0.471426 0.478569 0.485712 0.499998
0.50714 0.514283 0.521426 0.528569;
#X coords 0 1 99 0 200 140 1 0 0;
#X restore 356 438 graph;
#X floatatom 68 348 7 0 100 0 - - - 0;
#X obj 68 189 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000
#000000;
#X floatatom 81 212 5 0 0 0 - - - 0;
#X floatatom 112 245 5 0 0 0 - - - 0;
#X text 210 337 - optional number to initialize onset - default 0;
#X text 209 356 - optional number to initialize number of points -
default -1, f 61;
#X text 204 302 creation arguments: either array name or "-s" and optional
"-f" flags to refer to an array in a data structure;
#X text 121 211 onset;
#X text 154 244 number of points;
#X msg 156 275 symbol array-help-2;
#X text 304 276 set name or pointer;
#X obj 68 303 array max array-help-6, f 13;
#X floatatom 156 348 5 0 100 0 - - - 0;
#X text 90 186 bang to find maximum;
#X text 80 83 "array max" and "array min" find the maximum and minimum
values in the array \, respectively. The first outlet is the value
and the second is the index (the x location where the value was found).
The search may be restricted to a sub-domain of the array by specifying
the "onset" and "number of points"., f 65;
#X floatatom 114 557 7 0 100 0 - - - 0;
#X obj 114 418 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc
#000000 #000000;
#X floatatom 127 441 5 0 0 0 - - - 0;
#X floatatom 158 474 5 0 0 0 - - - 0;
#X text 172 438 onset;
#X floatatom 202 557 5 0 100 0 - - - 0;
#X text 136 415 bang to find minimum;
#X text 207 472 number of points;
#X obj 114 512 array min array-help-6, f 13;
#X text 67 371 value;
#X text 151 372 index;
#X text 544 30 <= click;
#N canvas 773 126 593 565 reference 0;
#X obj 9 55 cnv 5 550 5 empty empty INLETS: 8 18 0 13 #202020 #000000
0;
#X obj 8 88 cnv 1 550 1 empty empty 1st: 8 12 0 13 #000000 #000000
0;
#X obj 9 266 cnv 2 550 2 empty empty OUTLETS: 8 12 0 13 #202020 #000000
0;
#X obj 9 453 cnv 2 550 2 empty empty ARGUMENTS: 8 12 0 13 #202020 #000000
0;
#X obj 8 532 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000
0;
#X obj 7 206 cnv 1 550 1 empty empty 3rd: 8 12 0 13 #7c7c7c #000000
0;
#X text 112 215 symbol - set array name., f 46;
#X obj 9 383 cnv 2 550 2 empty empty FLAGS: 8 12 0 13 #202020 #000000
0;
#X text 106 235 pointer - pointer to the array if -s flag is used.
;
#X text 60 403 -s <symbol \, symbol>: struct name and field name of
main structure., f 67;
#X text 60 421 -f <symbol \, symbol>: struct name and field name of
element structure., f 69;
#X obj 7 155 cnv 1 550 1 empty empty 2nd: 8 12 0 13 #7c7c7c #000000
0;
#X text 116 481 float - initial onset (default: 0).;
#X text 109 461 symbol - array name if no flags are given (default:
none).;
#X text 118 120 float - onset (index to output from \, 0 is the start).
;
#X text 50 174 float - number or points to output from onset (-1 is
the end of array)., f 71;
#X text 116 501 float - initial number of points (default: -1 \, end
of array)., f 61;
#X obj 28 20 array min;
#X text 186 19 - output minmum and maximum values of an array;
#X obj 108 20 array max;
#X obj 8 300 cnv 1 550 1 empty empty 1st: 8 12 0 13 #000000 #000000
0;
#X obj 7 337 cnv 1 550 1 empty empty 2nd: 8 12 0 13 #7c7c7c #000000
0;
#X text 122 309 float - minimum or maximum value;
#X text 124 95 bang - to find min or maximum., f 49;
#X text 120 345 float - index of found value;
#X restore 450 30 pd reference;
#X obj 18 68 cnv 1 625 1 empty empty empty 8 12 0 13 #000000 #000000
0;
#X obj 47 15 array max;
#X obj 47 38 array min;
#X text 124 39 - min - find lowest value;
#X text 123 15 - max - find highest value;
#X connect 2 0 12 0;
#X connect 3 0 12 0;
#X connect 4 0 12 1;
#X connect 10 0 12 2;
#X connect 12 0 1 0;
#X connect 12 1 13 0;
#X connect 17 0 24 0;
#X connect 18 0 24 0;
#X connect 19 0 24 1;
#X connect 24 0 16 0;
#X connect 24 1 21 0;
#X restore 421 375 pd min+max;
#X obj 37 387 array min;
#X obj 455 483 list;
#X obj 359 483 text;
#X obj 400 483 scalar;
#X text 366 532 updated for Pd version 0.52;
#X obj 31 515 ../2.control.examples/15.array;
#X obj 31 538 ../2.control.examples/16.more.arrays;
#X text 25 473 see also the "array" examples from section 2 (click
below to open them) and these objects:, f 45;
#X obj 4 44 cnv 1 575 1 empty empty empty 8 12 0 13 #000000 #000000
0;
#X text 70 13 - define \, acccess and manipulate arrays;
#X text 497 12 <= click;
#N canvas 787 173 579 214 reference 0;
#X obj 7 143 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000
0;
#X text 73 18 - define \, acccess and manipulate arrays;
#X obj 8 75 cnv 2 550 2 empty empty ARGUMENT: 8 12 0 13 #202020 #000000
0;
#X text 96 85 symbol -;
#X obj 7 54 cnv 5 550 5 empty empty empty 8 18 0 13 #202020 #000000
0;
#X text 160 86 sets the function of [array] \, possible values: define
\, size \, sum \, get \, set \, quantile \, random \, max and min.
The default value is 'define'., f 54;
#X obj 26 18 array;
#X text 119 162 Open specific references in each subpatch detailing
each function on parent patch., f 41;
#X restore 403 12 pd reference;
#X obj 25 13 array;
#X obj 4 459 cnv 1 575 1 empty empty empty 8 12 0 13 #000000 #000000
0;
#X text 150 341 - array as probabilities;
#X text 150 364 - find highest value;
#X text 150 387 - find lowest value;
